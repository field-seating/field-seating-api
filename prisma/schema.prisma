// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // 要使用transaction 新增的，根據git issue需執行 npx prisma generate
  previewFeatures = ["interactiveTransactions"] 
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  name      String   @unique @db.VarChar(80)
  password  String   @db.VarChar(255)
  role      String   @db.VarChar(255) @default("user")
  status    String   @db.VarChar(255) @default("unverified")
  verificationToken String? @unique @db.VarChar(255)
  tokenCreatedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  records   Records[]
  photos    Photos[]
  collections Collections[]
  reviews Reviews[]
  passwordResetTokens PasswordResetTokens[]
}

model Fields {
  id        Int      @id @default(autoincrement())
  orientations FieldOnOrientations[]
  levels    FieldOnLevels[]
  name      String   @unique @db.VarChar(255)
  img       String?   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  zones     Zones[]
}

model Orientations {
  id        Int      @id @default(autoincrement())
  fields    FieldOnOrientations[]
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  zones     Zones[]
}

model FieldOnOrientations {
  orientation  Orientations @relation(fields: [orientationId], references: [id])
  orientationId     Int
  field   Fields @relation(fields: [fieldId], references: [id])
  fieldId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orientationId, fieldId])
  @@id([orientationId, fieldId])
}

model Levels {
  id        Int      @id @default(autoincrement())
  fields    FieldOnLevels[]
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  zones     Zones[]
}

model FieldOnLevels {
  level  Levels @relation(fields: [levelId], references: [id])
  levelId     Int
  field   Fields @relation(fields: [fieldId], references: [id])
  fieldId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([levelId, fieldId])
  @@id([levelId, fieldId])
}

model Zones {
  id        Int      @id @default(autoincrement())
  field     Fields    @relation(fields: [fieldId], references: [id])
  fieldId   Int
  orientation    Orientations    @relation(fields: [orientationId], references: [id])
  orientationId   Int
  level    Levels    @relation(fields: [levelId], references: [id])
  levelId   Int
  name      String   @db.VarChar(255)
  x_mirror Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  spaces    Spaces[]
  @@unique([fieldId, name])
}

model Spaces {
  id        Int      @id @default(autoincrement())
  name     String?    @db.VarChar(40)
  zone     Zones    @relation(fields: [zoneId], references: [id])
  zoneId   Int
  spaceType String   @db.VarChar(255)
  version   String   @db.VarChar(255)
  colNumber Int?   
  rowNumber Int?  
  positionColNumber Int   
  positionRowNumber Int   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seats    Seats[]
  pillars    Pillars[]
  groups    Groups[]
  aisles    Aisles[]
  records   Records[]
  photos    Photos[]
  collections Collections[]
  @@unique([id, spaceType])
  @@unique([zoneId, version, positionColNumber, positionRowNumber])
}

model Seats {
  space    Spaces    @relation(fields: [spaceId, spaceType], references: [id, spaceType])
  spaceId   Int  @id
  spaceType String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pillars {
  space    Spaces   @relation(fields: [spaceId, spaceType], references: [id, spaceType])
  spaceId   Int    @id
  spaceType String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Groups {
  space    Spaces   @relation(fields: [spaceId, spaceType], references: [id, spaceType])
  spaceId   Int    @id
  spaceType String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Aisles {
  space    Spaces   @relation(fields: [spaceId, spaceType], references: [id, spaceType])
  spaceId   Int    @id
  spaceType String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Records {
  id        Int      @id @default(autoincrement())
  user     Users    @relation(fields: [userId], references: [id])
  userId   Int
  space     Spaces    @relation(fields: [spaceId], references: [id])
  spaceId   Int
  date      DateTime @db.Date
  score   String?   @db.VarChar(10)
  comment String?   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photos    Photos[]
}

model Photos {
  id        Int      @id @default(autoincrement())
  user     Users    @relation(fields: [userId], references: [id])
  userId   Int
  space     Spaces    @relation(fields: [spaceId], references: [id])
  spaceId   Int
  record     Records?    @relation(fields: [recordId], references: [id])
  recordId   Int?
  path String   @unique @db.VarChar(255)
  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews Reviews[]
}

model Collections {
  id        Int      @id @default(autoincrement())
  user     Users    @relation(fields: [userId], references: [id])
  userId   Int
  space     Spaces    @relation(fields: [spaceId], references: [id])
  spaceId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reviews {
  id        Int      @id @default(autoincrement())
  user     Users    @relation(fields: [userId], references: [id])
  userId   Int
  photo     Photos    @relation(fields: [photoId], references: [id])
  photoId   Int
  useful    String?   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([photoId, useful])
  @@unique([userId, photoId])
}

model PasswordResetTokens {
  id            Int       @id @default(autoincrement())
  user          Users?     @relation(fields: [userId], references: [id])
  userId        Int
  token         String?   @unique @db.VarChar(255)
  state         PasswordResetTokenState @default(INVALID)
  tokenSignedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@index([state])
}

enum PasswordResetTokenState {
  INVALID
  VALID
}

